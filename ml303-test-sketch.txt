/*
 * ML-303 REMOD - Integration Test Sketch
 * 
 * This sketch tests the Arduino integration with the ML-303
 * Run this BEFORE uploading the full firmware!
 * 
 * Tests:
 * 1. Clock signal reception from original CPU
 * 2. Pass-through to 4017 counters  
 * 3. LCD display functionality
 * 4. MIDI communication
 * 5. Pot reading
 * 6. CV output via DAC
 * 
 * Expected behavior:
 * - Original ML-303 should work normally
 * - LED on Arduino blinks with clock
 * - LCD shows test information
 * - MIDI monitor shows activity
 */

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <MIDI.h>
#include <SPI.h>

// Pin Definitions
const int PIN_CLOCK_IN = 2;      // INT0 - From original CPU
const int PIN_GATE_IN = 3;       // Monitor original gate
const int PIN_CLOCK_OUT = 4;     // To 4017 
const int PIN_RESET_OUT = 5;     // To 4017 reset
const int PIN_GATE_OUT = 6;      // To analog section
const int PIN_ACCENT_OUT = 7;    // To accent circuit  
const int PIN_SLIDE_OUT = 8;     // To slide circuit
const int LED_BUILTIN = 13;      // Arduino LED
const int PIN_DAC_CS = 15;       // MCP4921 chip select

// Analog inputs
const int POT_CUTOFF = A0;
const int POT_RESONANCE = A1;
const int POT_ENVMOD = A2;
const int POT_DECAY = A3;

// LCD - try both common addresses
LiquidCrystal_I2C lcd(0x27, 16, 2);  // or 0x3F

// MIDI
MIDI_CREATE_DEFAULT_INSTANCE();

// Test variables
volatile unsigned long clockCount = 0;
volatile unsigned long lastClockTime = 0;
volatile bool clockReceived = false;
unsigned long lastDisplayUpdate = 0;
bool ledState = false;

// Clock interrupt handler
void clockISR() {
  clockReceived = true;
  clockCount++;
  
  // Measure interval
  unsigned long now = micros();
  if (lastClockTime > 0) {
    // Store interval for BPM calculation
  }
  lastClockTime = now;
  
  // Pass through immediately for low latency
  digitalWrite(PIN_CLOCK_OUT, HIGH);
  delayMicroseconds(10);
  digitalWrite(PIN_CLOCK_OUT, LOW);
}

void setup() {
  // Initialize serial for debugging
  Serial.begin(115200);
  Serial.println(F("ML-303 REMOD Test Sketch v1.0"));
  Serial.println(F("Starting initialization..."));
  
  // Configure pins
  pinMode(PIN_CLOCK_IN, INPUT);
  pinMode(PIN_GATE_IN, INPUT);
  pinMode(PIN_CLOCK_OUT, OUTPUT);
  pinMode(PIN_RESET_OUT, OUTPUT);
  pinMode(PIN_GATE_OUT, OUTPUT);
  pinMode(PIN_ACCENT_OUT, OUTPUT);
  pinMode(PIN_SLIDE_OUT, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(PIN_DAC_CS, OUTPUT);
  
  // Set initial states
  digitalWrite(PIN_CLOCK_OUT, LOW);
  digitalWrite(PIN_RESET_OUT, LOW);
  digitalWrite(PIN_GATE_OUT, LOW);
  digitalWrite(PIN_ACCENT_OUT, LOW);
  digitalWrite(PIN_SLIDE_OUT, LOW);
  digitalWrite(PIN_DAC_CS, HIGH);
  
  // Initialize LCD
  Serial.println(F("Initializing LCD..."));
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("ML-303 REMOD");
  lcd.setCursor(0, 1);
  lcd.print("Test Mode");
  
  // Initialize MIDI
  Serial.println(F("Initializing MIDI..."));
  MIDI.begin(MIDI_CHANNEL_OMNI);
  
  // Initialize SPI for DAC
  Serial.println(F("Initializing SPI..."));
  SPI.begin();
  SPI.setBitOrder(MSBFIRST);
  SPI.setDataMode(SPI_MODE0);
  
  // Attach interrupt for clock
  Serial.println(F("Attaching clock interrupt..."));
  attachInterrupt(digitalPinToInterrupt(PIN_CLOCK_IN), clockISR, RISING);
  
  // Send test notes via MIDI
  MIDI.sendNoteOn(60, 127, 1);
  delay(100);
  MIDI.sendNoteOff(60, 0, 1);
  
  // Reset the sequencer
  Serial.println(F("Sending reset pulse..."));
  digitalWrite(PIN_RESET_OUT, HIGH);
  delay(1);
  digitalWrite(PIN_RESET_OUT, LOW);
  
  Serial.println(F("Setup complete!"));
  Serial.println(F(""));
  Serial.println(F("Expected behavior:"));
  Serial.println(F("- Original ML-303 should work normally"));
  Serial.println(F("- Clock count should increase when running"));
  Serial.println(F("- Pots should show values 0-127"));
  Serial.println(F(""));
  
  delay(1000);
}

void loop() {
  // Handle clock reception
  if (clockReceived) {
    clockReceived = false;
    ledState = !ledState;
    digitalWrite(LED_BUILTIN, ledState);
    
    // Also pass through gate if present
    bool gateState = digitalRead(PIN_GATE_IN);
    digitalWrite(PIN_GATE_OUT, gateState);
  }
  
  // Update display every 200ms
  if (millis() - lastDisplayUpdate > 200) {
    updateDisplay();
    lastDisplayUpdate = millis();
  }
  
  // Read MIDI
  if (MIDI.read()) {
    // Echo MIDI activity to LCD
    lcd.setCursor(15, 0);
    lcd.print("M");
    
    // Handle MIDI messages
    switch(MIDI.getType()) {
      case midi::NoteOn:
        Serial.print(F("Note On: "));
        Serial.println(MIDI.getData1());
        break;
      case midi::NoteOff:
        Serial.print(F("Note Off: "));
        Serial.println(MIDI.getData1());
        break;
      case midi::Clock:
        // External clock received
        break;
    }
  } else {
    lcd.setCursor(15, 0);
    lcd.print(" ");
  }
  
  // Test DAC output - output slow triangle wave
  static unsigned int dacValue = 0;
  static int dacDirection = 64;
  dacValue += dacDirection;
  if (dacValue >= 4095 || dacValue == 0) {
    dacDirection = -dacDirection;
  }
  writeDAC(dacValue);
  
  // Serial monitoring
  static unsigned long lastSerialUpdate = 0;
  if (millis() - lastSerialUpdate > 1000) {
    Serial.print(F("Clock count: "));
    Serial.print(clockCount);
    Serial.print(F(" | Gate: "));
    Serial.print(digitalRead(PIN_GATE_IN));
    Serial.print(F(" | Cutoff: "));
    Serial.print(analogRead(POT_CUTOFF) >> 3);
    Serial.print(F(" | Res: "));
    Serial.print(analogRead(POT_RESONANCE) >> 3);
    Serial.print(F(" | DAC: "));
    Serial.println(dacValue);
    
    lastSerialUpdate = millis();
  }
}

void updateDisplay() {
  // Calculate BPM from clock
  static unsigned long lastClockCount = 0;
  unsigned long clockDiff = clockCount - lastClockCount;
  lastClockCount = clockCount;
  
  // Approximate BPM (assuming 24ppqn)
  int bpm = (clockDiff * 60 * 5) / 24;  // 5 = 1000ms/200ms
  
  // Read pots
  int cutoff = analogRead(POT_CUTOFF) >> 3;    // 0-127
  int resonance = analogRead(POT_RESONANCE) >> 3;
  int envmod = analogRead(POT_ENVMOD) >> 3;
  int decay = analogRead(POT_DECAY) >> 3;
  
  // Update LCD
  lcd.setCursor(0, 0);
  lcd.print("CLK:");
  lcd.print(clockCount % 10000);  // Rollover display
  lcd.print(" BPM:");
  lcd.print(bpm);
  lcd.print("  ");
  
  lcd.setCursor(0, 1);
  lcd.print("C");
  lcd.print(cutoff);
  lcd.print(" R");
  lcd.print(resonance);
  lcd.print(" E");
  lcd.print(envmod);
  lcd.print(" D");
  lcd.print(decay);
  lcd.print("  ");
}

void writeDAC(unsigned int value) {
  // MCP4921 write
  value &= 0x0FFF;  // Mask to 12 bits
  
  digitalWrite(PIN_DAC_CS, LOW);
  
  // Configuration bits: 0011 for DAC A, 1x gain, active
  byte highByte = 0x30 | ((value >> 8) & 0x0F);
  byte lowByte = value & 0xFF;
  
  SPI.transfer(highByte);
  SPI.transfer(lowByte);
  
  digitalWrite(PIN_DAC_CS, HIGH);
}

// I2C Scanner function - call from setup() if LCD not working
void scanI2C() {
  Serial.println(F("Scanning I2C bus..."));
  byte error, address;
  int nDevices = 0;
  
  for(address = 1; address < 127; address++) {
    Wire.beginTransmission(address);
    error = Wire.endTransmission();
    
    if (error == 0) {
      Serial.print(F("I2C device found at 0x"));
      if (address < 16) Serial.print("0");
      Serial.println(address, HEX);
      nDevices++;
    }
  }
  
  if (nDevices == 0) {
    Serial.println(F("No I2C devices found"));
  } else {
    Serial.println(F("I2C scan complete"));
  }
}

/*
 * Troubleshooting Guide:
 * 
 * 1. No clock counting:
 *    - Check connection from PIC to Arduino pin 2
 *    - Verify PIC is outputting clock (scope/LED test)
 *    - Check if ML-303 is in RUN mode
 * 
 * 2. LCD not working:
 *    - Uncomment scanI2C() call in setup()
 *    - Try address 0x3F instead of 0x27
 *    - Check I2C pull-up resistors (4.7k)
 *    - Verify 5V power to LCD
 * 
 * 3. Original not working:
 *    - Check jumpers on cut traces
 *    - Verify clock pass-through
 *    - Remove Arduino, jumper directly
 * 
 * 4. No MIDI:
 *    - Check optocoupler orientation
 *    - Verify MIDI cable orientation
 *    - Use MIDI monitor software
 * 
 * 5. Pots reading wrong:
 *    - Should read 0-127 range
 *    - Check ground connection
 *    - Verify 5V reference
 * 
 * 6. DAC not working:
 *    - Check SPI connections
 *    - Verify CS pin 15
 *    - Measure output with multimeter
 *    - Should see slow voltage change
 */